{
    parserClass = "de.rlang.intellij.alloy.AlloyParser"
    extends= "com.intellij.extapi.psi.ASTWrapperPsiElement"
    extends(".*expr")=expr
    consumeTokenMethod(".*_expr|expr")="consumeTokenFast"
    psiClassPrefix = "Alloy"
    psiImplClassSuffix = "Impl"
    psiPackage = "de.rlang.intellij.alloy.psi"
    psiImplPackage = "de.rlang.intellij.alloy.psi.impl"
    elementTypeHolderClass = "de.rlang.intellij.alloy.AlloyTypes"
    elementTypeClass = "de.rlang.intellij.alloy.AlloyElementType"
    tokenTypeClass = "de.rlang.intellij.alloy.AlloyTokenType"

    tokens = [
        LINE_COMMENT = "regexp://.*"
        NUMBER = "regexp:[+-]?(\d*[.])?\d+"
        FALSE = 'false'
        TRUE = 'true'
        NULL = 'null'

        IDENTIFIER = "regexp:[A-Za-z_][A-Za-z_0-9]*"
        MUL = "*"
        DIV = "/"
        PLUS = "+"
        MINUS = "-"
        CMP = "=="
        POW = '^'
        ASSIGN = '='
        L_BRACE = '{'
        R_BRACE = '}'
        L_BRACKET = '['
        R_BRACKET = ']'
        L_PAREN = '('
        R_PAREN = ')'
        COMMA = ','
        DOT = '.'
        QUOTE = '"'
        OR = '||'
        AND = '&&'
        CMP = "=="

        STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        WHITE_SPACE = "regexp:(\s|\t)"
        TERMINATOR = "\n"
    ]
}

file ::= body
body ::= [ statement* ]
statement ::= block | assign_expr

// Block
block ::= block_name block_label L_BRACE block_body R_BRACE
block_name ::= IDENTIFIER { DOT IDENTIFIER }*
block_label ::= [ STRING ]
block_body ::= statement*

expr ::= assign_expr
    | add_group
    | mul_group
    | unary_group
    | exp_expr
    | call_expr
    | qualification_expr
    | index_expr
    | primary_group

private unary_group ::= unary_plus_expr | unary_min_expr
private mul_group ::= mul_expr | div_expr
private add_group ::= plus_expr | minus_expr
private primary_group ::= simple_ref_expr | literal_expr | paren_expr | array_expr | object_expr

assign_expr ::= expr ASSIGN expr {
    rightAssociative=true
    methods=[left="Expression[0]" right="Expression[2]"]
}
unary_min_expr ::= MINUS expr
unary_plus_expr ::= PLUS expr
div_expr ::= expr DIV expr
mul_expr ::= expr MUL expr
minus_expr ::= expr MINUS expr
plus_expr ::= expr PLUS expr
exp_expr ::= expr (POW expr) + // N-ary variant, the "(<op> expr ) +" syntax is mandatory.
paren_expr ::= L_PAREN expr R_PAREN

// introduce fake rule with @Nullable qualifier getter and
// let qualified and simple references have its elementType
fake ref_expr ::= expr? DOT id
simple_ref_expr ::= id DOT id
qualification_expr ::= expr DOT id {extends=ref_expr elementType=ref_expr}
call_expr ::= expr L_PAREN (expr {COMMA expr}*)? R_PAREN

index_expr ::= L_BRACKET NUMBER R_BRACKET

// Array
array_expr ::= L_BRACKET expr? { COMMA expr }* [COMMA] R_BRACKET

// Object

object_expr ::= L_BRACE field_list R_BRACE
field_list ::= field { COMMA field }* [COMMA]
field ::= id ASSIGN expr


literal_expr ::= number_literal | string_literal | boolean_literal | null_literal | id
number_literal ::= NUMBER
string_literal ::= STRING
boolean_literal ::= TRUE | FALSE
null_literal ::= NULL
id ::= IDENTIFIER